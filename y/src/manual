usage:
  [y banco fromCSV -outTable tabelaA selectInsert]
  [y banco conn,hash [select|selectInsert|selectCSV] [|select..]]
  [y banco conn,hash executeInsert]
  [y banco conn,hash execute [|execute..]]
  [y banco conn,hash createjobexecute]
  [y banco [connIn,hash|fileCSV,file] connOut,hash -outTable tabelaA [|trunc|createTable] [carga|createjobcarga]]
  [y banco executejob]
  [y banco buffer [|-n_lines 500] [|-log buffer.log]]
  [y xlsxToCSV]
  [y token]
  [y gettoken]
  [y zip]
  [y gzip]
  [y gunzip]
  [y echo]
  [y printf]
  [y cat]
  [y md5]
  [y sha1]
  [y sha256]
  [y aes]
  [y base64]
  [y grep]
  [y wc -l]
  [y head]
  [y tail]
  [y cut]
  [y sed]
  [y n]
  [y rn]
  [y [bytesToInts|bi]]
  [y [intsToBytes|ib]]
  [y od]
  [y touch]
  [y iconv]
  [y tee]
  [y awk print]
  [y dev_null]
  [y dev_in]
  [y scp]
  [y execSsh]
  [y ssh]
  [y sftp]
  [y serverRouter]
  [y httpServer]
  [y help]

Exemplos...

[y banco fromCSV -outTable tabelaA selectInsert]
    cat arquivo.csv | y banco fromCSV -outTable tabelaA selectInsert
[y banco conn,hash [select|selectInsert|selectCSV] [|select..]]
    echo "select 1 from dual" | y banco conn,hash select
    y banco conn,hash select "select 1 from dual"
    echo "select * from tabela1" | y banco conn,hash selectInsert
    cat select.sql | y banco conn,hash selectCSV
    y banco -conn conn.. selectInsert
[y banco conn,hash executeInsert]
    cat listaDeInsert.sql | y banco conn,hash executeInsert
    echo "insert into tabela1 values(1,2,3)" | y banco conn,hash executeInsert
    echo "insert into tabela1 values(1,2,3);" | y banco conn,hash executeInsert
[y banco conn,hash execute [|execute..]]
    echo "truncate table tabela1" | y banco conn,hash execute
    y banco conn,hash execute "drop table tabela1"
    cat blocoAnonimo | y banco conn,hash execute
[y banco conn,hash createjobexecute]
    echo "truncate table tabela1" | y banco conn,hash createjobexecute
[y banco [connIn,hash|fileCSV,file] connOut,hash -outTable tabelaA [|trunc|createTable] [carga|createjobcarga]]
    echo "select * from TABELA_AAA" | y banco connIn,hash connOut,hash -outTable TABELA_BBB carga
    echo "select * from TABELA_AAA" | y banco connIn,hash connOut,hash -outTable TABELA_BBB trunc carga
    echo "select * from TABELA_AAA" | y banco connIn,hash connOut,hash -outTable TABELA_BBB createTable carga
    y banco -fileCSV arquivo.csv connOut,hash -outTable TABELA_CCC carga
    y banco -fileCSV arquivo.csv connOut,hash -outTable TABELA_CCC trunc carga
    y banco -fileCSV arquivo.csv connOut,hash -outTable TABELA_CCC createTable carga
[y banco executejob]
    (
        echo "select * from TABELA_AAA" | y banco connIn,hash connOut,hash -outTable TABELA_BBB trunc createjobcarga
        echo "select * from TABELA_CCC" | y banco connIn,hash connOut,hash -outTable TABELA_CCC trunc createjobcarga
    ) | y banco executejob
[y banco buffer [|-n_lines 500] [|-log buffer.log]]    
    echo "select * from TABELA1 | y banco conn,hash selectInsert | y banco buffer -n_lines 500 -log buffer.log | y banco conn,hash executeInsert
[y xlsxToCSV]
    xlsxToCSV arquivo.xlsx mostraEstrutura
    xlsxToCSV arquivo.xlsx listaAbas
    xlsxToCSV arquivo.xlsx numeroAba 1
    xlsxToCSV arquivo.xlsx nomeAba Planilha1
    obs: pegando a primeira aba => xlsxToCSV arquivo.xlsx numeroAba 1
[y token]
    y token value
[y gettoken]
    y gettoken hash
[y zip]
    y zip add File1.txt > saida.zip
    cat File1.txt | y zip add > saida.zip
    y zip add /pasta1 > saida.zip
    y zip list arquivo.zip
    cat arquivo.zip | y zip list
    y zip extract entrada.zip
    cat entrada.zip | y zip extract
    y zip extract entrada.zip -out /destino
    cat entrada.zip | y zip extract -out /destino
    y zip extractSelected pasta1/unicoArquivoParaExtrair.txt -out /destino
    cat entrada.zip | y zip extractSelected pasta1/unicoArquivoParaExtrair.txt -out /destino
    y zip extractSelected entrada.zip pasta1/unicoArquivoParaExtrair.txt > /destino/unicoArquivoParaExtrair.txt
    cat entrada.zip | y zip extractSelected pasta1/unicoArquivoParaExtrair.txt > /destino/unicoArquivoParaExtrair.txt
    obs: o comando "cat File1.txt | y zip add > saida.zip" gera o arquivo saida.zip com o conteudo interno chamado dummy
[y gzip]
    cat arquivo | y gzip > arquivo.gz
[y gunzip]
    cat arquivo.gz | y gunzip > arquivo
[y echo]
    echo a b c
    echo "a b c"
[y printf]
    echo a b c
    echo "a b c"
    obs: diferente do echo, o printf nao gera \n no final
[y cat]
    y cat arquivo
[y md5]
    cat arquivo | y md5
[y sha1]
    cat arquivo | y sha1
[y sha256]
    cat arquivo | y sha256
[y aes]
    cat arquivo | y aes SENHA | y base64
    cat arquivo | y aes -e SENHA | y base64
    cat arquivo | y aes -d SENHA | y base64
    cat arquivo | y aes -e SENHA -md MD5 | y base64
    cat arquivo | y aes -e SENHA -md SHA256 | y base64
    cat arquivo | y aes -e SENHA -md SHA-256 | y base64
    cat arquivo | y aes -e SENHA -md MD5 -S AAAAAAAAAAAAAAAA | y base64
    obs: O comando "y aes -e SENHA -md MD5 -S AAAAAAAAAAAAAAAA" equivale à "openssl aes-256-cbc -e -k SENHA -md MD5 -S AAAAAAAAAAAAAAAA"
    obs2: O valor de salt(-S) deverá contér 16 hexas maiúsculos, ex: AAAAAAAAAAAAAAAA
[y base64]
    cat arquivo | y base64
    cat arquivo | y base64 -d
    y base64 -e "texto"
    y base64 -d "YQ=="
    y printf "texto" | base64 -e 
    obs: -e para encode e -d para decode
[y grep]
    cat arquivo | y grep ^Texto$
    cat arquivo | y grep AB
[y wc -l]
    cat arquivo | y wc -l
[y head]
    cat arquivo | y head
    cat arquivo | y head -30
[y tail]
    cat arquivo | y tail
    cat arquivo | y tail -30
[y cut]
    cat arquivo | y cut -c-10
    cat arquivo | y cut -c5-10
    cat arquivo | y cut -c5-
    cat arquivo | y cut -c5
    cat arquivo | y cut -c5-10,15-17
[y sed]
    cat arquivo | y sed A B    
[y n]
    cat arquivo | y n
    obs: modifica arquivo \r\n para \n(se ja tiver \n nao tem problema)
[y rn]
    cat arquivo | y rn
    obs: modifica arquivo \n para \r\n(se ja tiver \r\n nao tem problema)
[y [bytesToInts|bi]]
    cat arquivo | y bytesToInts
    cat arquivo | y bi
    obs entrada: arquivo binario
    obs saida: lista de numeros bytes(0..255)
    obs2 bi == bytesToInts
[y [intsToBytes|ib]]
    echo 55 | y intsToBytes
    cat arquivo | y intsToBytes
    cat arquivo | y ib
    y intsToBytes 20 20
    y ib 20 20
    obs entrada: lista de numeros bytes(0..255)
    obs saida: arquivo binario
    obs2 por conceito, os bytes variam entre -128..127, mas aqui usaremos 0..255
    obs3 ib == intsToBytes
[y od]
    cat arquivo | od
    cat arquivo | od -bc
    cat arquivo | od -bcr
    obs: -r mostra numero bytes
[y touch]
    y touch fileA
    y touch fileA -3600
    y touch fileA 60
    y touch fileA 20210128235959
    obs: 60(60 segundos a frente)
    obs2: -3600(3600 segundos atrás)
    obs3: 20210128235959(setando em 28/01/2021 23:59:59)
[y iconv]
    y iconv -f UTF-8 -t ISO-8859-1 file
    cat file | y iconv -f UTF-8 -t ISO-8859-1 
    cat file | y iconv -f ISO-8859-1 -t UTF-8
    obs: tipos suportados: "ISO-8859-1","UTF-8","UTF-8BOM","UCS-2LE","UCS-2LEBOM"
    obs2: convert UTF-8 para ISO-8859-1(padrao windows, equivalente ao ANSI do notepad e equivalente ao windows-1252)
    obs3: BOM do UTF-8 em numerico => 239 187 191
    obs4: BOM do UCS-2LE em numerico => 255 254
[y tee]
    cat arquivo | y tee saida.txt
[y awk]
    cat arquivo | y awk print 1 3 5,6
    cat arquivo | y awk start AAA end BBB    
    cat arquivo | y awk start AAA
    cat arquivo | y awk end BBB    
    cat arquivo | y awk -v start AAA end BBB    
    cat arquivo | y awk -v start AAA
    cat arquivo | y awk -v end BBB    
    obs: "-v" é a negativa
    obs2: start e end pode ocorrer varias vezes no texto
[y dev_null]
    cat arquivo | y banco buffer -n_lines 500 -log buffer.log | y dev_null
[y dev_in]
    y dev_in | y banco buffer -n_lines 500 -log buffer.log | y dev_null
[y scp]
    y scp file1 user,pass@servidor:file2
    y scp file1 user,pass@servidor:file2 22
    y scp user,pass@servidor:file1 file2
    y scp user,pass@servidor:file1 file2 22
    obs: user,pass ou user
[y execSsh]
    y execSsh user,pass@servidor command
    y execSsh user,pass@servidor command 22
    obs: user,pass ou user
[y ssh]
    y ssh user,pass@servidor
    y ssh user,pass@servidor 22
    obs: user,pass ou user
[y sftp]
    y sftp user,pass@servidor
    y sftp user,pass@servidor 22
    obs: user,pass ou user
[y serverRouter]
    y serverRouter 192.168.0.100 8080 localhost 9090
    y serverRouter 192.168.0.100 8080 localhost 9090 show
    y serverRouter 192.168.0.100 8080 localhost 9090 showOnlySend
    y serverRouter 192.168.0.100 8080 localhost 9090 showOnlyReceive

    y serverRouter localhost 8080 localhost 9090
    y serverRouter localhost 8080 localhost 9090 show
    y serverRouter localhost 8080 localhost 9090 showOnlySend
    y serverRouter localhost 8080 localhost 9090 showOnlyReceive
    obs:
        192.168.0.100 -> ip a se conectar(se colocar localhost ele vai tentar pegar o ip correto)
        8080 -> porta para conectar no router
        localhost -> local que o serverRouter conecta(use nome da maquina ou ip)
        9090 -> porta que o serverRouter conecta
[y TESTEserver]
    y TESTEserver 9090
    y TESTEserver 192.168.0.100 9090
[y TESTEclient]
    y TESTEclient localhost 8080
[y httpServer]
    y httpServer localhost pagina_toke_zzz111 "Lista de arquivos" 8888 "/dir" "" ""
    parametros: host(pode ser ""), titulo_url, titulo, port, dir, endsWiths(ex: "","jar,zip"), ips_banidos(ex: "","8.8.8.8,4.4.4.4")

Exemplo de conn: -conn "jdbc:oracle:thin:@//host_name:1521/service_name|login|senha"
Exemplo de conn: -conn "jdbc:oracle:thin:@host_name:1566:sid_name|login|senha"

Observações:
entrada de dados pode ser feito por |
export STATUS_FIM_Y=path/fim.log para receber a confirmação de fim de processamento de selectCSV
export COUNT_Y=path/count.log para receber a quantidade de linhas geradas no CSV(sem o header) do comando selectCSV
export CSV_SEP_Y="|" para utilizar um separador diferente, pode ser usado tanto em leitura de csv quanto gravação
export CSV_ONLYCHAR_Y="S" usado para nao imprimir aspas duplas em numericos, pode ser usado na gravação de csv, quanto a leitura de csv nao precisa, a leitura ja interpreta automaticamente isso

Dica: copiar o arquivo hash do token pra o nome do banco. cd $TOKEN_Y;cp 38b3492c4405f98972ba17c0a3dc072d servidor;
Dica2: vendo os tokens: grep ":" $TOKEN_Y/*
Dica3: vendo warnnings ORA: cat $ORAs_Y

alias no windows(criar arquivo c:\Windows\System32\y.bat com o conteudo abaixo):
@echo off
java -cp c:\\y;c:\\y\\ojdbc6.jar;c:\\y\\jsch-0.1.55.jar Y %1 %2 %3 %4 %5 %6 %7 %8 %9

alias no linux:
alias y='java -cp /y:/y/ojdbc6.jar:/y/jsch-0.1.55.jar Y'

