usage:
  [y daemon]
  [y take]
  [y banco fromCSV -outTable tabelaA selectInsert]
  [y banco conn,hash [select|selectInsert|selectCSV] [|select..]]
  [y banco conn,hash executeInsert]
  [y banco conn,hash execute [|execute..]]
  [y banco conn,hash createjobexecute]
  [y banco [connIn,hash|fileCSV,file] connOut,hash -outTable tabelaA [|trunc|createTable] [carga|createjobcarga]]
  [y banco executejob]
  [y banco buffer [|-n_lines 4000] [|-log buffer.log]]
  [y selectCSV]
  [y xlsxToCSV]
  [y token]
  [y gettoken]
  [y json]
  [y zip]
  [y gzip]
  [y gunzip]
  [y tar]
  [y untar]
  [y tarlist]
  [y echo]
  [y printf]
  [y sdiff]
  [y progressBar]
  [y xargs]
  [y cat]
  [y lower]
  [y upper]
  [y removeAcentos]
  [y xor]
  [y md5]
  [y sha1]
  [y sha256]
  [y aes]
  [y base64]
  [y grep]
  [y wc]
  [y len]
  [y head]
  [y tail]
  [y cut]
  [y yt]
  [y curl]
  [y cors]
  [y [sed|tr]]
  [y n]
  [y rn]
  [y [bytesToInts|bi]]
  [y [intsToBytes|ib]]
  [y od]
  [y touch]
  [y rm]
  [y cp]
  [y mv]
  [y cd]
  [y iconv]
  [y tee]
  [y uniq]
  [y quebra]
  [y seq]
  [y tr]
  [y add]
  [y awk print]
  [y dev_null]
  [y dev_in]
  [y scp]
  [y execSsh]
  [y ssh]
  [y sshinfo]
  [y sftp]
  [y serverRouter]
  [y httpServer]
  [y wget]
  [y pwd]
  [y find]
  [y ls]
  [y lss]
  [y du]
  [y split]
  [y regua]
  [y link]
  [y os]
  [y pss]
  [y pid]
  [y date]
  [y cronometro]
  [y [cls|clear|clean]]
  [y ping]
  [y pings]
  [y pingMine]
  [y ips]
  [y mouse]  
  [y mixer]
  [y gravador]
  [y play]
  [y call]
  [y remote]
  [y injectMicLine]
  [y kill]
  [y win]
  [y speed]
  [y lock]
  [y monitor]
  [y printScreen]
  [y paste]
  [y mkv]
  [y thumbnail]
  [y insta]
  [y bmp]
  [y decodeUrl]
  [y encodeUrl]
  [y test]
  [y controlc]
  [y random]
  [y talk]
  [y sign]
  [y overflix]
  [y connGui]
  [y var]
  [y cotacao]
  [y [update|u]]
  [y help]

Exemplos...

[y daemon]
    y daemon
    y daemon -server
    y d r a
    y d list
    y d tail AA
    y d restart AA
[y take]
    y take
    y take file1 pasta2
    Obs: envia o conteudo desta para para outro computador ou pasta
    Obs2: após digitar y take, ele irá mostrar o comando que será utilizado na outra ponta
[y banco fromCSV -outTable tabelaA selectInsert]
    cat arquivo.csv | y banco fromCSV -outTable tabelaA selectInsert
[y banco conn,hash [select|selectInsert|selectCSV] [|select..]]
    echo "select 1 from dual" | y banco conn,hash select
    y banco conn,hash select "select 1 from dual"
    echo "select * from tabela1" | y banco conn,hash selectInsert
    cat select.sql | y banco conn,hash selectCSV
    y banco -conn conn.. selectInsert
[y banco conn,hash executeInsert]
    cat listaDeInsert.sql | y banco conn,hash executeInsert
    echo "insert into tabela1 values(1,2,3)" | y banco conn,hash executeInsert
    echo "insert into tabela1 values(1,2,3);" | y banco conn,hash executeInsert
[y banco conn,hash execute [|execute..]]
    echo "truncate table tabela1" | y banco conn,hash execute
    y banco conn,hash execute "drop table tabela1"
    cat blocoAnonimo | y banco conn,hash execute
[y banco conn,hash createjobexecute]
    echo "truncate table tabela1" | y banco conn,hash createjobexecute
[y banco [connIn,hash|fileCSV,file] connOut,hash -outTable tabelaA [|trunc|createTable] [carga|createjobcarga]]
    echo "select * from TABELA_AAA" | y banco connIn,hash connOut,hash -outTable TABELA_BBB carga
    echo "select * from TABELA_AAA" | y banco connIn,hash connOut,hash -outTable TABELA_BBB trunc carga
    echo "select * from TABELA_AAA" | y banco connIn,hash connOut,hash -outTable TABELA_BBB createTable carga
    y banco -fileCSV arquivo.csv connOut,hash -outTable TABELA_CCC carga
    y banco -fileCSV arquivo.csv connOut,hash -outTable TABELA_CCC trunc carga
    y banco -fileCSV arquivo.csv connOut,hash -outTable TABELA_CCC createTable carga
[y banco executejob]
    (
        echo "select * from TABELA_AAA" | y banco connIn,hash connOut,hash -outTable TABELA_BBB trunc createjobcarga
        echo "select * from TABELA_CCC" | y banco connIn,hash connOut,hash -outTable TABELA_CCC trunc createjobcarga
    ) | y banco executejob
[y banco buffer [|-n_lines 4000] [|-log buffer.log]]    
    echo "select * from TABELA1 | y banco conn,hash selectInsert | y banco buffer -n_lines 4000 -log buffer.log | y banco conn,hash executeInsert
[y selectCSV]
    y cat file.csv | y selectCSV "select * from this"
    y cat file.csv | y selectCSV "select * from this where a = '3'"
    y cat file.csv | y selectCSV "select * from this limit 10"
    y cat file.csv | y selectCSV "select * from this limit 10" -outJson
    echo '[{"a":"3" },{"a": "4"}]' | y json "[elem for elem in data]" | y selectCSV "select * from this where a = '3'"
    y selectCSV -csv file.csv "select * from this"
    y selectCSV -csv file.csv -sql consulta.sql
    obs: alguns comandos => valor_int*valor_int | (valor_int) | valor_txt in (valor_txt ...) | if( boolean, valor_int, valor_int) | if( boolean, valor_txt, valor_txt) | parseInt(valor_txt) | substr( valor_txt, valor_int ) | substr( valor_txt, valor_int, valor_int ) | not boolean
[y xlsxToCSV]
    xlsxToCSV arquivo.xlsx mostraEstrutura
    xlsxToCSV arquivo.xlsx listaAbas
    xlsxToCSV arquivo.xlsx numeroAba 1
    xlsxToCSV arquivo.xlsx nomeAba Planilha1
    xlsxToCSV arquivo.xlsx exportAll
    obs: pegando a primeira aba => xlsxToCSV arquivo.xlsx numeroAba 1
[y xml]
    cat arquivo.xml | y xml mostraEstrutura
    xml arquivo.xml mostraEstrutura
    cat arquivo.xml | y xml mostraTags
[y token]
    y token value
[y gettoken]
    y gettoken hash
[y json]
   y cat file.json | y json mostraEstrutura
   y cat file.json | y json mostraTabela
   y cat file.json | y json "[elem for elem in data['items']]"
   y cat file.json | y json "[elem['id'] for elem in data['items']]"
   y cat file.json | y json "[elem['id'] for elem in data]"
   obs: parametro de apoio => mostraEstruturaDebug
   obs2: exemplo com lista, representada por '_':
         y echo '{"folders": [{"id": 1, "lists":[{"id": 11},{"id": 12}] },{"id": 2, "lists":[{"id": 21},{"id": 22}] }] }' | y json "[elem for elem in data['folders']['_']['lists']]"
   obs3: selecionando alguns campos:
         y echo '{"folders": {"id1":11, "id2": 22, "id3": 33} }' | y json "[[elem['id1'],elem['id3']] for elem in data['folders']]"
   obs4: parametro noHeader => tira o header
   obs5: parametro list => resultado em forma de lista sem o header
[y zip]
    y zip add File1.txt > saida.zip
    cat File1.txt | y zip add -name File1.txt > saida.zip
    y zip add /pasta1/pasta2 > saida.zip
    y zip add pasta2 -lvlStore > saida.zip
    y zip add pasta1 pasta2 file3 -lvlStore > saida.zip
    y zip list arquivo.zip
    cat arquivo.zip | y zip list
    y zip extract entrada.zip
    cat entrada.zip | y zip extract
    y zip extract entrada.zip -out /destino
    cat entrada.zip | y zip extract -out /destino
    y zip extractSelected entrada.zip pasta1/unicoArquivoParaExtrair.txt -out /destino
    cat entrada.zip | y zip extractSelected pasta1/unicoArquivoParaExtrair.txt -out /destino
    y zip extractSelected entrada.zip pasta1/unicoArquivoParaExtrair.txt > /destino/unicoArquivoParaExtrair.txt
    cat entrada.zip | y zip extractSelected pasta1/unicoArquivoParaExtrair.txt > /destino/unicoArquivoParaExtrair.txt
    obs: se add pasta e a descricao de pasta tem "/" ou "\\" então o pacote terá o conteudo da pasta, caso contrário terá a pasta citada+conteudo.
[y gzip]
    cat arquivo | y gzip > arquivo.gz
[y gunzip]
    cat arquivo.gz | y gunzip > arquivo
[y tar]
    y tar in > test.tar
    y tar test.tar in
    obs: suporta arquivo com ateh 8 gigas
[y untar]
    y cat test.tar | y untar
    y untar test.tar
    y untar test.tar in/in2/only
[y tarlist]
    y tarlist test.tar
[y echo]
    echo a b c
    echo "a b c"
    echo "a*"
[y printf]
    echo a b c
    echo "a b c"
    obs: diferente do echo, o printf nao gera \n no final
    obs2: echo -n AA gera o mesmo efeito que, printf AA
[y sdiff]
    y sdiff file1.txt file2.txt
[y progressBar]
    ( echo 1 text1; sleep 1; echo 2 text2; sleep 1; echo 1 text1 updated; sleep 1; echo done; ) | y progressBar
    ( echo 1 text1; sleep 1; echo 2 text2; sleep 1; echo 1 text1 updated; sleep 1; echo done; ) | y progressBar -uniqLine
[y xargs]
    y echo a | y xargs echo
    y echo a | y xargs echo "{}" "{}"
    y cls && y find | y grep "." | y tr """" "" | y xargs echo "y printf \"\" | ffmpeg -i \"{}\"  -max_muxing_queue_size 1024 \"{}.mp4\" && y rm \"{}\"" | y tr "rmvb.mp4" "mp4" | y tr "mpg.mp4" "mp4"
    obs: ffmpeg precisa de stdin para nao bugar em lista cmd, porisso usar y printf "" | ffmpeg...
[y cat]
    y cat arquivo
[y lower]
    y echo AA | y lower
[y upper]
    y echo aa | y upper
[y removeAcentos]
    y cat file | y removeAcentos
[y xor]
    y cat file | y xor 100
    y cat beltmatic_002.sav | y xor 104948 "7,215,169,11,62,56,139,40,128,196,29,36,86,12,244,116,175,83,57,142,3,255,249,75,208,143,44,62,165,92,216,64,24,1,125,20,82,107,43,11,123,121,31,99,250,252,15,214,90,234,96,112,163" > source.zip
    obs: 104948 sendo o length do file beltmatic_002.sav
    logica interna:
    for (let i = 0; i < bytes.length; i++)
      bytes[i] ^= key[(i + bytes.length) % 53];
    obs2: valor entre 0 e 255. Por padrao 100
[y md5]
    cat arquivo | y md5
[y sha1]
    cat arquivo | y sha1
[y sha256]
    cat arquivo | y sha256
[y aes]
    cat arquivo | y aes SENHA | y base64
    cat arquivo | y aes -e SENHA | y base64
    cat arquivo | y aes -d SENHA | y base64
    cat arquivo | y aes -e SENHA -md MD5 | y base64
    cat arquivo | y aes -e SENHA -md SHA256 | y base64
    cat arquivo | y aes -e SENHA -md SHA-256 | y base64
    cat arquivo | y aes -e SENHA -md MD5 -S AAAAAAAAAAAAAAAA | y base64
    obs: O comando "y aes -e SENHA -md MD5 -S AAAAAAAAAAAAAAAA" equivale à "openssl aes-256-cbc -e -k SENHA -md MD5 -S AAAAAAAAAAAAAAAA"
    obs2: O valor de salt(-S) deverá contér 16 hexas maiúsculos, ex: AAAAAAAAAAAAAAAA
    obs3: Se utilizar o salt na encriptacao, entao devera utilizar o mesmo salt na decriptacao
[y base64]
    cat arquivo | y base64
    cat arquivo | y base64 -d
    y base64 -e "texto"
    y base64 -d "YQ=="
    y printf "texto" | base64 -e 
    obs: -e para encode e -d para decode
[y grep]
    cat arquivo | y grep ^Texto$
    cat arquivo | y grep AB
    cat arquivo | y grep -i -v aa bb cc
[y wc]
    cat arquivo | y wc -l
    cat arquivo | y wc -w
    cat arquivo | y wc -c
    obs: conta. 
         l -> lines, w -> words, c -> chars
[y len]
    cat arquivo | y len
    obs: echo aabaa | tr b "\n" | y len
    result: 2
            2
[y head]
    cat arquivo | y head
    cat arquivo | y head -30
[y tail]
    cat arquivo | y tail
    cat arquivo | y tail -30
[y cut]
    cat arquivo | y cut -c-10
    cat arquivo | y cut -c5-10
    cat arquivo | y cut -c5-
    cat arquivo | y cut -c5
    cat arquivo | y cut -c5-10,15-17
[y yt]
    y yt
    obs: irá exibir a msg:
    cd D:\\ProgramFiles && python3 yt-dlp/yt_dlp/__main__.py http...
[y curl]
    echo '{"id":1}' | y curl \
        -H "Content-Type: application/json" \
        -H "other: other" \
        -X POST http://localhost:8080/v1/movies
    cat file | y curl \
        -H "Content-Type: application/json" \
        -X POST http://localhost:8080/v1/movies
    curl http://localhost:8080/v1/movies
    curl http://localhost:8080/v1/movies --limit-rate 20M
    obs: -v => verbose
    obs2: --header é o mesmo que -H
[y cors]
    y cors
    y cors -port 4000
    y cors -ip 200.200.200.200 -port 4000
    y cors -sw "https://super" -sw "https://teste"
    obs: -sw significa startWith
    obs2: cors serve como bypass de "blocked by CORS policy"
    obs3: -sw é opcional, mas uma vez utilizado, só permitirá os valores informados pelos -sw
    obs4: o cors não usa stream, ou seja, captura 100% da resposta para depois transmitir.
    obs5: local host de ip classe C não funciona no browser
    exemplo de requisição js:
    var b_status=0;
    function b(url){
      if(location.href.indexOf('http://')!= 0){alert('cors nao pode ser executado nessa aba! somente em http://');return;}
      if(url.indexOf('?')>-1) url=url.split('?')[0]+'?base64?'+btoa(url);
      var xhr = new XMLHttpRequest();
      xhr.withCredentials = false;
      xhr.open("GET", url, false);
      xhr.overrideMimeType("text/plain; charset=x-user-defined");
      xhr.send(null);
      b_status=xhr.status;
      return xhr.responseText;
    }
    b('http://200.200.200.200:4000?https://site.com');
[y curlJson]
    y curlJson \
        -H "Content-Type: application/json" \
        -H "other: other" \
        http://localhost:8080/v1/movies \
        "[elem['id'] for elem in data]"
    obs: mistura de curl com json
[y [sed|tr]]
    cat arquivo | y sed A B
    cat arquivo | y sed A B E F
    obs: sed com dois parametros é performatico e aceita por exemplo \n como quebra
[y n]
    cat arquivo | y n
    obs: modifica arquivo \r\n para \n(se ja tiver \n nao tem problema)
[y rn]
    cat arquivo | y rn
    obs: modifica arquivo \n para \r\n(se ja tiver \r\n nao tem problema)
[y [bytesToInts|bi]]
    cat arquivo | y bytesToInts
    cat arquivo | y bi
    cat arquivo | y bi -128
    obs entrada: arquivo binario
    obs saida: lista de numeros bytes(0..255)
    obs2 bi == bytesToInts
[y [intsToBytes|ib]]
    echo 55 | y intsToBytes
    cat arquivo | y intsToBytes
    cat arquivo | y ib
    y intsToBytes 20 20
    y ib 20 20
    obs entrada: lista de numeros bytes(0..255)
    obs saida: arquivo binario
    obs2 por conceito, os bytes variam entre -128..127, mas aqui usaremos 0..255
    obs3 ib == intsToBytes
[y od]
    cat arquivo | od
    cat arquivo | od -bc
    cat arquivo | od -bcr
    obs: -r mostra numero bytes
         -b octal bytes
         -c character
[y touch]
    y touch fileA
    y touch fileA -3600
    y touch fileA 60
    y touch fileA 20210128235959
    obs: 60(60 segundos a frente)
    obs2: -3600(3600 segundos atrás)
    obs3: 20210128235959(setando em 28/01/2021 23:59:59)
[y rm]
    y rm file1 file2
    y rm -R pasta
    y rm -R pasta1 file1
[y cp]
    y cp file1 file2
    y cp -R pasta1 pasta2
    obs: se a pasta2 nao existir entao é criado a cópia com o nome pasta2, se existir é copiado dentro da pasta(se dentro da pasta existir ai eh feito overwrite)
[y mv]
    y mv file1 file2
    y mv pasta1 pasta2
[y cd]
    y cd
    obs: equivalente a cd $HOME no linux e cd %userprofile% no windows
[y mkdir]
    y mkdir pasta1
[y iconv]
    y iconv -f UTF-8 -t ISO-8859-1 file
    cat file | y iconv -f UTF-8 -t ISO-8859-1 
    cat file | y i1
    cat file | y iconv -f ISO-8859-1 -t UTF-8
    cat file | y i2
    obs: tipos suportados: "ISO-8859-1","UTF-8","UTF-8BOM","UCS-2LE","UCS-2LEBOM"
    obs2: convert UTF-8 para ISO-8859-1(padrao windows, equivalente ao ANSI do notepad e equivalente ao windows-1252)
    obs3: BOM do UTF-8 em numerico => 239 187 191
    obs4: BOM do UCS-2LE em numerico => 255 254
[y tee]
    cat arquivo | y tee saida.txt
[y uniq]
    cat arquivo | y uniq
[y quebra]
    cat arquivo | y quebra
    cat arquivo | y quebra -len 5
[y seq]
    y seq 1 10 2
    y seq 5 7
    y seq 9 -10
    y seq 2022-09-19 2022-11-19
    y seq 19/11/2022 19/09/2022
[y tr]
    echo a a | y tr "a" "bb"
    Obs: no windows, usar """" ao invés de "\""
[y add]
    y add 2022-09-19
    y add 19/09/2022
[y awk]
    cat arquivo | y awk print 1 3 "5,6"
    cat arquivo | y awk print -1
    cat arquivo | y awk start AAA end BBB    
    cat arquivo | y awk start AAA
    cat arquivo | y awk end BBB    
    cat arquivo | y awk -v start AAA end BBB    
    cat arquivo | y awk -v start AAA
    cat arquivo | y awk -v end BBB    
    obs: "-v" é a negativa
    obs2: start e end pode ocorrer varias vezes no texto
    obs3: -1 significa o ultimo
[y dev_null]
    cat arquivo | y banco buffer -n_lines 4000 -log buffer.log | y dev_null
    cat arquivo | y banco buffer -n_lines 4000 -log buffer.log > /dev/null
[y dev_in]
    y dev_in | y banco buffer -n_lines 4000 -log buffer.log | y dev_null
    y dev_in | y banco buffer -n_lines 4000 -log buffer.log > /dev/null
    obs: ref. a dd if e dd of
[y scp]
    y scp file1 user,pass@servidor:file2
    y scp file1 user,pass@servidor:file2 22
    y scp user,pass@servidor:file1 file2
    y scp user,pass@servidor:file1 file2 22
    comando windows:
    y scp user,pass@servidor:c:/tmp file2 22
    obs: user,pass ou user
[y execSsh]
    y execSsh user,pass@servidor command
    y execSsh user,pass@servidor command 22
    obs: user,pass ou user
[y ssh]
    y ssh user,pass@servidor
    y ssh user,pass@servidor 22
    obs: user,pass ou user(dependendo da origem e destino windows buga)
[y sshinfo]
    y sshinfo
    y sshinfo 192.168.0.100
    y sshinfo 192.168.0.100 22
[y sftp]
    y sftp user,pass@servidor
    y sftp user,pass@servidor 22
    obs: user,pass ou user
[y serverRouter]
    y serverRouter [ipA] 8080 [ipB] 9090
    y serverRouter 192.168.0.100 8080 127.0.0.1 9090
    y serverRouter 192.168.0.100 8080 127.0.0.1 9090 show
    y serverRouter 192.168.0.100 8080 127.0.0.1 9090 showOnlySend
    y serverRouter 192.168.0.100 8080 127.0.0.1 9090 showOnlyReceive
    y serverRouter 192.168.0.100 8080 127.0.0.1 9090 showSimple
    y serverRouter 192.168.0.100 8080 127.0.0.1 9090 -log_ips d:/ProgramFiles/log_ips/log_8080.txt
    y serverRouter 192.168.0.100 8080 127.0.0.1 9090 -log_ips d:/ProgramFiles/log_ips/log_8080.txt -noLogLocal
    y serverRouter 127.0.0.1 8080 127.0.0.1 9090
    y serverRouter 127.0.0.1 8080 127.0.0.1 9090 show
    y serverRouter 127.0.0.1 8080 127.0.0.1 9090 showOnlySend
    y serverRouter 127.0.0.1 8080 127.0.0.1 9090 showOnlyReceive
    y serverRouter 127.0.0.1 8080 127.0.0.1 9090 showSimple
    obs:
        [ipA] -> Router -> [ipB]
        [ipA] conecta no router que conecta no [ipB]
   obs2, mais atributos opcionais:
        "-decodeSend" "12 0 26 6 0 0 0 0 0 0 0 0 0" "15 0 3 12 119 119 32 103 105 118 101 32 116 97 105 108"
        "-decodeReceive" "3 0 0 0 ..." "4 0 0 0"
        "-suprimeSend" "5 0 0 0"
        "-suprimeReceive" "5 0 0 0"
        -ips_banidos 2804:14d:ac80:8889::
        -xor 100
[y httpServer]
    y httpServer
    set var="httpServer -mode playlist -host 192.168.0.100 -port 8888 -log_ips d:/ProgramFiles/log_ips/log_8888.txt" && y var
    set var="httpServer -mode playlist -host 192.168.0.100 -port 8888 -log_ips d:/ProgramFiles/log_ips/log_8888.txt -noLogLocal" && y var
    set var="httpServer -mode playlistmovie 192.168.0.100 8888 -log_ips d:/ProgramFiles/log_ips/log_8888.txt" && y var
    set var="httpServer -mode playlistserver 192.168.0.100 8888 -cfg d:/ProgramFiles/playlistserver.cfg" && y var
    windows:
    set var="httpServer" "-host" "127.0.0.1" "-port" "8888" "-titulo_url_token" "" "-titulo" "titulo" "-dir" "." "-endsWith" "" "-ips_banidos" "" "-log_ips" "" && y var
    linux:
    export var='"httpServer" "-host" "127.0.0.1" "-port" "8888" "-titulo_url_token" "" "-titulo" "titulo" "-dir" "." "-endsWith" "" "-ips_banidos" "" "-log_ips" ""' && y var
    Obs, valores padroes:
    host: 127.0.0.1
    port: 8888
    titulo_url_token: ""
    titulo: titulo
    Exemplo de endsWith: "jar,zip"
    Exemplo de ips_banidos: "8.8.8.8,4.4.4.4"
    Exemplo de log_ips: "c:\tmp\ips.log"
    -redisDir ""
    -redisDir "c:\tmp\tmp" -redisSeconds "600"
    curl redis:
    y curl "http://site:1000/" -H "Redis-KEY: *"
    y curl "http://site:1000/" -H "Redis-KEY: A" -H "Redis-VALUE: B"
    y curl "http://site:1000/" -H "Redis-DEL: A"
    y curl "http://site:1000/" -H "Redis-KEY: A" -H "Redis-VALUE: B" -H "Redis-ID: C" -H "Redis-SIGN: Y" # retorna 200 ou 203
    obs, como funciona o SIGN(add key value concorrente):
      Em caso de =>                   -H "Redis-KEY: A" -H "Redis-VALUE: B" -H "Redis-ID: C" -H "Redis-SIGN: Y" # ele retorna 200. "Redis-SIGN: Y" força o valor "C" para SIGN
      Em caso de um sign diferente => -H "Redis-KEY: A" -H "Redis-VALUE: B" -H "Redis-ID: C2"                   # ele retorna 203 negando a gravação, pois KEY A está com SIGN C e não C2.
[y wget]
    y wget -h
[y pwd]
    y pwd
[y find]
    y find
    y find .
    y find /
    y find . -mtime -1  # arquivos recentes de 1 dia para menos
    y find . -mtime 0.5 # arquivos recentes a mais de 12 horas
    y find . -type f # somente Files    
    y find -type f -pre "y cat" -pos "| y grep 'PESQUISA AQUI'" 
    obs: -L para navegar dentro do SymbolicLink, ex: y find / -L
    obs2: -type contem as opcoes f e d
[y ls]
    y ls
    y ls pasta1
    y ls "pas*"
[y lss]
    y lss
    y lss parta1
[y du]
    y du
    y du . -g
    ex: guia para limpeza de disco: D:\>y du -g | y tr ".\\" "" | y grep -v "\\"
[y sleep]
    y sleep
    y sleep 0.22 # 0.22 seconds
    y sleep infinity
[y split]
    y cat fileA | y split -b 22
    y cat fileA | y split -l 22
    y cat fileA | y split --lines=22
    y cat fileA | y split --bytes=22
    y split --lines=22 --prefix=AA fileA # AAxxa
[y regua]
    y regua
    y regua 90
[y link]
    y link "/opt/original" "original_linked"
    y link "c:\\tmp\\original" "original_linked"
    y link "" "b"
    obs: original_linked sendo o link criado que aponta para /opt/original
    internal command windows: mklink /j "original_linked" "c:\\tmp\\original"
    internal command nao windows: ln -s "/opt/original" "original_linked"
[y os]
    y os
    obs: exibe informacoes do sistema operacional[windows/mac/linux/unix]
[y pss]
    y pss
    y pss " y lock "
    y pss "buscando" "nao buscando" "nao buscando"
[y pid]
    y pid 222
    Obs: onde 222 é o processId encontrado em y pss
[y date]
    y date
    y date "+%s%N" # epoch
    y date "+%Y%m%d_%H%M%S"
    y date "+%d/%m/%Y %H:%M:%S:%N %Z %s"
    y date "+%d/%m/%Y %H:%M:%S:%N %Z %s%N"    
    y date "+%s%N" from "20240625_102251_345_America/Sao_Paulo" mask "+%Y%m%d_%H%M%S_%N_%z"
    y date "+%s%N" from "20240625_102251_345_UTC" mask "+%Y%m%d_%H%M%S_%N_%z"
    y date "+%s%N" from "20240625_102251_345_-03" mask "+%Y%m%d_%H%M%S_%N_%Z"
[y uptime]
    y uptime
    y uptime -ms
[y cronometro]
    y cronometro
    y cronometro start
    y cronometro flag
    y cronometro end
    obs: "y cronometro" dispara o comando equivalente a flag a cada enter pressionado.
[y clear]
    y clear
    obs: alternativa y cls
[y cls]
    y cls
    obs: alternativa y clear
[y ping]
    y ping 192.168.0.100
    y ping 192.168.0.100 -t 15
    obs: -t 15 => timeout 15 segundos
[y pings]
    y pings
    y pings -t 15
    obs: lista os ips ja fazendo ping
    obs2: -t 15 => timeout 15 segundos
[y pingMine]
    y pingMine mc.gladmc.com
    y pingMine mc.gladmc.com 25565
    y pingMine your_site -tray
    obs: autostart tray:
        criar atalho javaw em %appdata%\..\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
        e colocar no atalho -Dfile.encoding=UTF-8 -cp c:\\y;c:\\y\\ojdbc6.jar;c:\\y\\sqljdbc4-3.0.jar;c:\\y\\mysql-connector-java-8.0.26.jar;c:\\y\\jsch-0.1.55.jar Y pingMine your_site -tray
    obs2: o tray não mostra numeros acima de 9
[y ips]
    y ips
    y ips list
    obs: mostra ips da maquina
    obs2: list -> monta uma shell de verificacao de ips para outra maquina
[y mouse]
    y mouse # mostra as coordenadas do mouse
    y mouse "m 32 1009 c c m 927 467 cD cD s 2 cD cD s 9 m 64 1043 c c m 927 467 cD cD s 2 cD cD s 9" # away dota base baixa - Os Iluminados
    y mouse "m 177 879 c c m 927 467 cD cD s 2 cD cD s 9 m 209 910 c c m 927 467 cD cD s 2 cD cD s 9" # away dota base alta - Os Temidos
    obs: bloquear a tela faz o programa sair imediatamente
    mais opcoes:
    key w
    k w
    keypress w
    kp w
    keyrelease w
    kr w
[y mixer]
    y mixer
    obs: lista os mixers
[y gravador]
    y gravador file.wav
    y gravador > file.wav
    y gravador -mixer "-" -f file.wav
    y gravador -mixer "-" -line > fileLine
    y gravador -mixer "-" -line | y play -line    
    obs: formatos: -line, -wave e -mp3
    obs2: -mp3 ainda não implementado
[y play]
    y play file.wav -volume 0.5
    y play -f file.wav
    y cat file.wav | y play
    y cat fileLine | y play -mixer "-" -line
    obs: formatos: -line, -wave e -mp3
    obs2: -mp3 ainda não implementado
    obs3: -volume varia entra 0 e 1 mas de acordo com o volume ja setado, ou seja, se ja tiver em 10% e o comando colocar 0.5 então seria equivalente a 5%
[y call]
    y call
[y remote]
    y remote
    y remote -ip localhost
[y injectMicLine]
    y cat file.line | y injectMicLine
[y kill]
    y kill 3434
    y kill 3434 3435
    y kill -9 3434 3435
    y kill -2 3434 3435
    y kill text -Dnetbeans netbeans
[y win]
    y win
    obs: mostra se o windows e office estão ativado
    obs2: outra forma de verificar pelo cmd -> slmgr -dli
[y speed]
    y speed
    y speed -ip 192.168.0.100
    Obs: -ip -port -server -client -send -receive|-r
[y lock]
    y lock
    y lock w
    y lock 0 -> desliga lock
    obs: gera black screen
    obs2: y lock w -> white screen
[y monitor]
    y monitor cpu
    y monitor cpu oneLine
[y printScreen]
    y printScreen
    y printScreen 2
[y paste]
    y paste file1 file2
[y mkv]
    y mkv
    y mkv -v
    y mkv -force
    y mkv -lento
    obs: ffmpeg -i "A.mkv" -qscale 0 "A.mp4"
    obs: -lento tem outro algotirmo de conversão, as vezes é necessario e tudo tiver bugando
[y thumbnail]
    y thumbnail
[y insta]
    y insta [url]
[y bmp]
    y cat img.bmp | y bmp
    y bmp -file a.bmp -len 64
    y cat img.bmp | y bmp -len 64 # modo assinatura de 64 ponto de largura, uso para comparação entre imagens
    # primeira linha x, segunda y, demais r g b
[y decodeUrl]
    echo T%C3%B3quio | y decodeUrl
[y encodeUrl]
    echo Tóquio | y encodeUrl
    obs: o espaço esta sendo representado como +, o que é uma tradução obsoleta.
[y test]
    y test
[y controlc]
    y controlc
[y random]
    y random 1 2
[y talk]
    y talk list
    y talk oi
    y talk -lang Brazilian_Portuguese_Ricardo -msg oi
    y talk -lang Brazilian_Portuguese_Vitoria -msg "desliga esse computador, agora!" -o "d:/ProgramFiles/musicas_ia/talk.wav"
    y echo oi | y talk
    y talk cat
    oi 1
    oi 2
    oi 3
[y sign]
    y sign -msg "Hello" -pass "My passphrase"
    y sign -verify -msg "Hello" -publicKey "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAECA0o3fwUI5SpIb7sJjAeZsNzME2PsstRLerQyqRKKDKakcZYIWY+BOAhlakJROiKQoZn3JOO5UljNkFY2VwrWg==" -signature "MEQCIGfX7zpNdjcy5mtO53YZ43Ff2v5j9s8i2VykEVnyV1tCAiBEONmNS3ATFRN4MZ7/4u52jnIcBxJYcD606KcKT3T4oA=="
    obs: retornando true, significa assinatura ok
    obs2: Informações técnicas => SPEC "secp256r1" ALGO = "SHA256withECDSA"
    obs3: Não confundir com secp256k1 do bitcoin
[y overflix]
    y overflix "https://overflix.bar/assistir-rick-e-morty-dublado-online-3296/"
    y overflix -onlyLink "https://overflix.bar/assistir-rick-e-morty-dublado-online-3296/"
    y overflix -onlyPreLink "https://overflix.bar/assistir-rick-e-morty-dublado-online-3296/"    
    y overflix -v -onlyLink "https://overflix.bar/assistir-rick-e-morty-dublado-online-3296/?temporada=2"
    obs: -vToken => mostra iexplorer.exe e não fecha.
         -o => force out path
         -tags => verbose profundo
[y connGui]
    connGui
    obs: teste de conexao(server e client)
[y var]
    y var
    Obs: execução por parametro de variavel
    windows:
    set var="cat" "a" && y var
    linux:
    export var='"cat" "a"' && y var
    export var='"cat" "a"' && y var -ignore FLAG_HERE
[y cotacao]
    y cotacao
[y help]
    y help <command>
    y help router

Exemplos de conn: 
    -conn "jdbc:oracle:thin:@//host_name:1521/service_name|login|senha"
    -conn "jdbc:oracle:thin:@host_name:1566:sid_name|login|senha"
    -conn "jdbc:sqlserver://localhost:1433;databaseName=MyDatabase;user=myUsername;password=myPassword;"
    -conn "jdbc:mysql://localhost:3306|login|senha"

Observações:
entrada de dados pode ser feito por |
export STATUS_FIM_Y=path/fim.log para receber a confirmação de fim de processamento de selectCSV
export COUNT_Y=path/count.log para receber a quantidade de linhas geradas no CSV(sem o header) do comando selectCSV
export CSV_SEP_Y="|" para utilizar um separador diferente, pode ser usado tanto em leitura de csv quanto gravação
export CSV_ONLYCHAR_Y="S" usado para nao imprimir aspas duplas em numericos, pode ser usado na gravação de csv, quanto a leitura de csv nao precisa, a leitura ja interpreta automaticamente isso
export FORMAT_DATA_Y="TZ" deixando a data 10/10/2010T10:10:10Z
export FORMAT_DATA_Y="UTC" deixando a data 10/10/2010 10:10:10 UTC
export FORMAT_DATA_Y="NATAL" toda data será na data do natal ex 25/12/2010 10:10:15
export FORMAT_DATA_Y="YYYY-MM-DD" 2010-07-07 12:12:12
export COM_SEPARADOR_FINAL_CSV_Y="S" ex: "a";"a"; o padrao seria "a";"a"
export SEM_HEADER_CSV_Y="S"
todos os comandos acima podem ser usados como parametro, ex: -CSV_SEP_Y ","

Dica: copiar o arquivo hash do token pra o nome do banco. cd $TOKEN_Y;cp 38b3492c4405f98972ba17c0a3dc072d servidor;
Dica2: vendo os tokens: grep ":" $TOKEN_Y/*
Dica3: vendo warnnings ORA: cat $ORAs_Y